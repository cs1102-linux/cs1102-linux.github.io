[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS1102 Linux Shell Lab",
    "section": "",
    "text": "Getting Started",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "index.html#important-links",
    "href": "index.html#important-links",
    "title": "CS1102 Linux Shell Lab",
    "section": "Important Links",
    "text": "Important Links\nCourse Link: Check the course portal  Course Calendar: Calendar for this course  Lab Meeting Link: https://meet.google.com/jbe-xuew-hia \nTutorial Videos to get started: \n\nVM Login process explained in step by step \nTo use course VM and solve assignments",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "index.html#vm-access",
    "href": "index.html#vm-access",
    "title": "CS1102 Linux Shell Lab",
    "section": "VM-Access",
    "text": "VM-Access\n\nOpen your terminal/command prompt/powershell from your system (NOT from the VirtualBox)\nFor simpler setup do not enter any passphrase and skip all the prompts by pressing Enter\nType ssh-keygen in the terminal/command prompt/powershell and Enter. You should see output similar to the following:\n\n&lt;username&gt;@my-laptop:~$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/&lt;username&gt;/.ssh/id_rsa):\nCreated directory '/home/&lt;username&gt;/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/&lt;username&gt;/.ssh/id_rsa\nYour public key has been saved in /home/&lt;username&gt;/.ssh/id_rsa.pub\nThe key fingerprint is:\nSHA256:MyMwAvTo90BeuaGhaS9aq3Lc2QivijK7oMkigMCm14Y &lt;username&gt;@my-laptop\nThe key's randomart image is:\n+---[RSA 3072]----+\n|o.               |\n| .o   .          |\n|...+o+           |\n|oo=.+oo          |\n|== B .. S        |\n|= E =  . +       |\n|o+.* =           |\n|%o+.= .          |\n|#Oo.             |\n+----[SHA256]-----+\n\nBy default, if the file is not specified\n\n\nPublic key will be stored as ~/.ssh/id_ed25519.pub or C:\\Users\\&lt;username&gt;\\.ssh\\id_rsa.pub.\nPrivate key will be stored as ~/.ssh/id_ed25519 or C:\\Users\\&lt;username&gt;\\.ssh\\id_rsa\n\n\nTo view the public key, use cat command to display the content of the public key which ends with .pub inside the ~/.ssh directory (by default) (For Windows follow the above directory structure)\n\ncat ~/.ssh/id_rsa.pub (or)\ncat ~/.ssh/id_ed25519.pub \n\nCopy and paste the content of the public key (NOT THE PRIVATE KEY) that ends with .pub into the ‚ÄúSSH Key‚Äù form field on the website (use your student email ID to log in).\nAfter submitting the SSH key, you can log in to the VM using SSH from your system.\n\n\nEnsure the directory ~/.ssh with file permission 700\nEnsure the files ~/.ssh/id_rsa.pub and ~/.ssh/id_rsa with file permission 600.\n\n\nThe following command used to connect remote machine via SSH using the default private key (~/.ssh/id_rsa or ~/.ssh/id_ed25519)\n\nssh &lt;roll-number&gt;@cs1102.study.iitm.ac.in\n\nThe below command used to connect remote machine via SSH using the custom private key path\n\nssh -i &lt;path/to/private/key&gt; &lt;roll-number&gt;@cs1102.study.iitm.ac.in\n\nOnce, you have logged in your command prompt will look like:\n\n\n&lt;roll-number&gt;@cs1102:~$\n\n\n\n\n\n\n\nNote\n\n\n\nRead more about SSH by clicking here",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "lab_instructions.html",
    "href": "lab_instructions.html",
    "title": "Instructions for Online Lab",
    "section": "",
    "text": "How to do lab questions in the VM?",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Instructions for Online Lab</span>"
    ]
  },
  {
    "objectID": "lab_instructions.html#how-to-do-lab-questions-in-the-vm",
    "href": "lab_instructions.html#how-to-do-lab-questions-in-the-vm",
    "title": "Instructions for Online Lab",
    "section": "",
    "text": "Complete each question only after logging into the course VM and following the format below while taking screenshots:\n\nIf the question requires you to complete the task on your local PC, then follow the below format:\n\n\nExecute the date command (e.g., Sat Jan 25 01:22:00 AM IST 2025).\n\n\n\nAdd a comment on the next line: # Roll_no  Name\n(e.g., 25f1234567  YOUR NAME HERE)\n\n\n\nIf any questions require working with files, they can be found in /opt/lab-assets\n\n\n\n\n\n\n\nImportant\n\n\n\n\nThe command prompt from the CS1102 course VM must be visible in the solution screenshot for every question\nIf there is no prompt, you will receive zero marks in that lab",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Instructions for Online Lab</span>"
    ]
  },
  {
    "objectID": "lab_instructions.html#how-to-write-a-lab-report-in-google-doc",
    "href": "lab_instructions.html#how-to-write-a-lab-report-in-google-doc",
    "title": "Instructions for Online Lab",
    "section": "How to write a Lab Report in Google Doc?",
    "text": "How to write a Lab Report in Google Doc?\n\nIn the Google Doc, create a new tab for each lab (Example: If you doing the Lab-1, create a tab named Lab-1)\nCreate outlines for each questions (Example: Create a outline named Question 1 if you are solving that question 1) in each tab, to navigate the questions easily. Check here to know about how to create a outlines in the document\nStick to the question sequence as given in the problem statement while answering the lab\nEnsure that the screenshots are clear and that the text is readable. Screenshots containing very small or blurred images will be rejected\nA lab report must include the questions along with their corresponding answer screenshots\nAlign your document well and maintain the consistent font size and font style throughout the document. Preferably,\n\nFont size - 11 (normal text) and 14 (heading)\nFont style - Open Sans (medium)\n\nCheck the lab document template here\n\n\n\n\n\n\n\nImportant\n\n\n\n\nIf your doc/report does not follow format above, it will not be evaluated\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nFeel free to use document comments to communicate with your lab TA.\nOnce you complete the lab work for a particular lab, tag your TA in your lab report and let him/her know.\nYour TA‚Äôs will also give feedback on the questions using the comments in the google doc.",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Instructions for Online Lab</span>"
    ]
  },
  {
    "objectID": "lab_instructions.html#action-on-malpracticesplagiarism",
    "href": "lab_instructions.html#action-on-malpracticesplagiarism",
    "title": "Instructions for Online Lab",
    "section": "Action on Malpractices/Plagiarism",
    "text": "Action on Malpractices/Plagiarism\nIf you engage in malpractice or plagiarism, the following actions will be taken:\n\nYou will be required to repeat the entire lab in the next term.\n\nA remark regarding malpractice will be added to your degree.\n\nMalpractices include (but are not limited to):\n\nUsing other student‚Äôs answer screenshot\nUsing or sharing answers with another person.",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Instructions for Online Lab</span>"
    ]
  },
  {
    "objectID": "lab/lab_1.html",
    "href": "lab/lab_1.html",
    "title": "Lab-1",
    "section": "",
    "text": "Navigating the Linux & Exploring the FHS\nWeek-1: Launching a Linux Virtual Machine, Command line environment, Simple Commands in Linux - 1, Simple Commands in Linux - 2\nWeek-2: Command line editors - Part 01, Command line editors - Part 02, Command line editors - Part 03, Networking Commands and SSH\nQ1:\nQ2:\nQ3:\nQ4:\nSpecial Files: /proc ‚Äî Virtual Filesystem for Kernel and Process Information\n(Minimal File Content Screenshot and Text Answer - Max 5 lines) (40 marks)",
    "crumbs": [
      "**Labs**",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Lab-1</span>"
    ]
  },
  {
    "objectID": "lab/lab_1.html#navigating-the-linux-exploring-the-fhs",
    "href": "lab/lab_1.html#navigating-the-linux-exploring-the-fhs",
    "title": "Lab-1",
    "section": "",
    "text": "A typical C program that deals with networking will include the header file socket.h for using socket-related functions, and for low-level inter-process communication, unistd.h (which provides access to pipe()) is used.\nIf you‚Äôre curious to know what‚Äôs really defined inside socket.h or unistd.h, where would you navigate in your Linux system to find these headers? Extra info: Go to x86_64-linux-gnu/sys sub-directory to find files related to system. (Take a screenshot of the command(s) you used to navigate to the location.)\nOnce you find the file, display the first 30 lines of socket.h or unistd.h on your terminal using an appropriate command. (Take a screenshot of this terminal output.)\nWhat interesting macros, types, or function declarations did you find in the first 30 lines? (Text Answer - Max 5 lines) (15 marks)\n\n\n\nAfter exploring socket.h, you come across several unfamiliar but interesting functions such as socket(), bind(), listen(), and accept(). You understand their purpose is related to networking, but you‚Äôre unsure of their exact usage, arguments, or return values.\nHow can you view the documentation or usage details for these system-level functions in Linux? (Take a screenshot of the command(s) you used.) (10 marks)\n\n\n\n\n\n\n\nüìñ Check this Info: History of the man Command.\n\n\n\n\n\nWhat is Setuid and Setgid in Linux file permissions? (Text Answer - Max 5 lines)\nIn Linux systems, find an example of a Setuid or Setgid file (commonly found in /usr/bin or /bin) and take a screenshot of its permissions using ls -l.\nOnce found, execute the file or explore its functionality ‚Äî what interesting behavior do you observe? (Take screenshots and paste those)\nWhat are the advantages and disadvantages of using Setuid/Setgid on executables? (Text Answer) (10 marks)\n\n\n\n\n\n4.1: Where is the /proc directory located, and what kind of filesystem is it?\n4.2: What does the /proc/cpuinfo file contain? (Processor information)\n4.3: What information can be found in /proc/meminfo? (Memory-related details)\n4.4: What is the purpose of /proc/uptime and /proc/loadavg? (System uptime and load averages)\n4.5: What do /proc/[pid]/status and /proc/[pid]/cmdline reveal? (Process-specific info)\n4.6: What is /proc/kallsyms used for? (Kernel symbol table)\n4.7: How can you monitor open files and file descriptors using /proc/[pid]/fd/? (Demo with a running process)\n4.8: What does /proc/sys/ directory contain? How can you use it to modify kernel parameters temporarily?\n4.9: What is /proc/bus/ and what is its historical significance? (PCI and USB bus-related files)\n4.10: What is the purpose of /proc/buddyinfo, and how is it related to memory fragmentation?",
    "crumbs": [
      "**Labs**",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Lab-1</span>"
    ]
  },
  {
    "objectID": "lab/lab_1.html#text-editors",
    "href": "lab/lab_1.html#text-editors",
    "title": "Lab-1",
    "section": "Text Editors",
    "text": "Text Editors\n\nCustomize Your Vim Editor: Enhance the usability and readability of your Vim editor by customizing it. Explore popular .vimrc configurations on GitHub or other websites. Share your favorite custom configuration and explain why you chose it (Screenshot and Text Answer). (Bonus Task)\nLearn the Basics of Vim: If you‚Äôre new to Vim, don‚Äôt worry! We‚Äôll cover specific Vim-related tasks in Lab-2. For now, focus on learning the basics of the Vim editor using the following reference: Learn Vim Basics (Not Graded)",
    "crumbs": [
      "**Labs**",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Lab-1</span>"
    ]
  },
  {
    "objectID": "lab/lab_1.html#networking",
    "href": "lab/lab_1.html#networking",
    "title": "Lab-1",
    "section": "Networking",
    "text": "Networking\nQ5: (Perform this task in your local machine and refer to the instructions)\n\nDo you know before ssh, there is something called telnet. What is Telnet? And why we have moved from telnet to ssh ? (Text Answer - Max 5 lines)\nAnd telnet into a free open servers List of Open Telnet Servers . (Provide screenshots and a short explanation-Text Answer) (10 marks)\n\nQ6: (Perform this task in your local machine and refer to the instructions)\n\nKnow your Network (Screenshots and Text Answer) (10 marks)\nKnow the Difference: FTP vs.¬†SFTP\n\nBefore the secure sftp, the ftp protocol was widely used.\nWhat is FTP? Why is SFTP preferred over FTP today? (Text Answer - Max 5 lines)\n\nTry connecting to an open FTP server using the ftp command.\nExample: ftp speedtest.tele2.net (Provide screenshots of listing files or downloading a sample file.)\n\nIf possible, try sftp as a secure alternative and compare the outputs. (Provide a short explanation - Text Answer)",
    "crumbs": [
      "**Labs**",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Lab-1</span>"
    ]
  },
  {
    "objectID": "lab/lab_1.html#writing-your-first-bash-script",
    "href": "lab/lab_1.html#writing-your-first-bash-script",
    "title": "Lab-1",
    "section": "Writing Your First Bash Script",
    "text": "Writing Your First Bash Script\nQ7:\n\nWrite a Bash script to automate the creation of the following directory structure, including files, hard links, and symbolic links. After executing your script, run the tree command to verify the output. (Provide screenshots of the script content and output directory structure by tree command) (20 marks)\n\n\n\n\n\n\n\nNote\n\n\n\nA Bash script is simply a file containing a sequence of commands that are executed in order. Think of it as a way to automate tasks that you would normally run manually in the terminal.\n\n\n   project/\n   ‚îú‚îÄ‚îÄ docs/\n   ‚îÇ   ‚îú‚îÄ‚îÄ readme.txt\n   ‚îÇ   ‚îî‚îÄ‚îÄ changelog.txt\n   ‚îú‚îÄ‚îÄ src/\n   ‚îÇ   ‚îú‚îÄ‚îÄ main.c\n   ‚îÇ   ‚îú‚îÄ‚îÄ utils.c\n   ‚îÇ   ‚îî‚îÄ‚îÄ include/\n   ‚îÇ       ‚îî‚îÄ‚îÄ utils.h\n   ‚îú‚îÄ‚îÄ logs/\n   ‚îÇ   ‚îú‚îÄ‚îÄ main_log.c (hard link to src/main.c)\n   ‚îÇ   ‚îú‚îÄ‚îÄ utils_log.c (hard link to src/utils.c)\n   ‚îÇ   ‚îî‚îÄ‚îÄ old_logs/\n   ‚îÇ       ‚îî‚îÄ‚îÄ archive.log\n   ‚îî‚îÄ‚îÄ symlinks/\n      ‚îú‚îÄ‚îÄ readme_link.txt (symbolic link to docs/readme.txt)\n      ‚îú‚îÄ‚îÄ main_symlink.c (symbolic link to src/main.c)\n      ‚îî‚îÄ‚îÄ multi_level/\n         ‚îî‚îÄ‚îÄ readme_multi_link.txt (symbolic link to symlinks/readme_link.txt)\n\nGet to know the synchro show, synchro init, synchro eval and synchro status\nQ8:\nFollow the instructions to solve the questions in the VM\n\nSolve the following practice questions (Bonus - 5 marks)\n\npractice_2.1\npractice_2.2\npractice_2.3\n\n\nAfter solving these questions, type synchro status and take the screenshot",
    "crumbs": [
      "**Labs**",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Lab-1</span>"
    ]
  },
  {
    "objectID": "references/ga_doc.html",
    "href": "references/ga_doc.html",
    "title": "Grading Document (May 2025)",
    "section": "",
    "text": "Introduction to the Linux Shell Lab\nCorequisites: Introduction to the Linux Shell ‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ Credits: 1\nThe Introduction to the Linux Shell Lab consists of two components:",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Grading Document (May 2025)</span>"
    ]
  },
  {
    "objectID": "references/ga_doc.html#introduction-to-the-linux-shell-lab",
    "href": "references/ga_doc.html#introduction-to-the-linux-shell-lab",
    "title": "Grading Document (May 2025)",
    "section": "",
    "text": "Online Lab\n\nIn-Campus Lab",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Grading Document (May 2025)</span>"
    ]
  },
  {
    "objectID": "references/ga_doc.html#online-lab-ol",
    "href": "references/ga_doc.html#online-lab-ol",
    "title": "Grading Document (May 2025)",
    "section": "Online Lab (OL)",
    "text": "Online Lab (OL)\nOnline Lab assignments:\nThis lab will be conducted online during the course. The start dates for the labs are as follows:\n\nLab 1: Released on 21 June 2025 ‚ÄÉ ‚ÄÉ Deadline - 25 June 2025\nLab 2: Released on 05 July 2025 ‚ÄÉ ‚ÄÉ Deadline -\nLab 3: Released on 19 July 2025 ‚ÄÉ ‚ÄÉ ‚ÄÉ Deadline -\nLab 4 and 5: Released on 02 August 2025 ‚ÄÉ ‚ÄÉ Deadline -\n\nLabs are typically expected to be completed within 4 days. Teaching Assistants (TAs) will be available to assist you during this period.",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Grading Document (May 2025)</span>"
    ]
  },
  {
    "objectID": "references/ga_doc.html#in-campus-lab-il",
    "href": "references/ga_doc.html#in-campus-lab-il",
    "title": "Grading Document (May 2025)",
    "section": "In-campus Lab (IL)",
    "text": "In-campus Lab (IL)\nIn-campus Lab work: Students are required to visit IIT Madras for lab work.\nLab Dates:\n\nSlot 1: September 1st week\nSlot 2: September 2nd week\n\nEligibility to attend the in-person lab:\n\nAverage of all online lab scores &gt;= 40/100.\n\nEligibility to obtain the final lab course grade:\n\nAverage of all lab scores &gt;= 40/100.\nAttend the in-person lab at IIT Madras",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Grading Document (May 2025)</span>"
    ]
  },
  {
    "objectID": "references/ga_doc.html#final-grading-of-lab",
    "href": "references/ga_doc.html#final-grading-of-lab",
    "title": "Grading Document (May 2025)",
    "section": "Final Grading of Lab",
    "text": "Final Grading of Lab\n\nOnline Lab(OL): Average of all 5 lab scores\nIn-campus Lab(IL): 1 * Lab task and demonstration\n\nFinal course score (T) = \\(0.5*(OL)+0.5*(IL)\\)",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Grading Document (May 2025)</span>"
    ]
  },
  {
    "objectID": "references/vm_nav.html",
    "href": "references/vm_nav.html",
    "title": "How to solve the questions in the VM?",
    "section": "",
    "text": "Log in to the VM using ssh &lt;roll-number&gt;@cs1102.study.iitm.ac.in\nTo view all the available questions in the directory\n\nls /opt/cs1102\n\n\nCreate a directory in your home folder using mkdir cs1102 and navigate to the directory cd cs1102\n\n\n\nYour command prompt should now look like this:\n\n\n&lt;roll-number&gt;@cs1102:~/cs1102$\n\n\nSolve each question by creating a directory named after the question(example practice_2.1)\n\nmkdir practice_2.1\ncd practice_2.1\n\nAfter navigating to the practice_2.1 directory, type synchro show to view the question\n\n\n\nSolve the question by either writing the script &lt;script&gt;.sh or by executing commands directly in the command line, as instructed in the question\nEnsure that you have the necessary permissions to run the script. If not, change the script‚Äôs permissions using chmod 755 &lt;script&gt;.sh\nRun synchro eval to submit the question. It will display the submission status and show how many test cases you have passed or failed\nTo view the public test cases and evaluation script for the question, navigate to ~/opt/cs1102/&lt;question&gt;\n\n\n\n\n\n\n\nImportant\n\n\n\n\nsynchro init - to iniatilize or bring all the neccessary files to solve the problem\nsynchro show - to view the question\nsynchro eval - to submit and evaluate the question\n\nAll these commands needs to be executed within the directory (~/cs1102/&lt;question&gt;)\n\nsynchro status - to view the number of questions you have solved\n\nAll the instructions are also available in the course VM itself. You can read them by batcat ~/README.md",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>How to solve the questions in the VM?</span>"
    ]
  },
  {
    "objectID": "references/vm_troubleshoot.html",
    "href": "references/vm_troubleshoot.html",
    "title": "Troubleshooting the VM",
    "section": "",
    "text": "1. Permission Denied (Issue 1)\nThe error message Permission denied (publickey) indicates that the SSH server is not accepting your public key for authentication. Below are some common reasons for this error and the steps you can take to resolve it:\nSolution: Reupload your ssh-key in the site",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Troubleshooting the VM</span>"
    ]
  },
  {
    "objectID": "references/vm_troubleshoot.html#permission-denied-issue-1",
    "href": "references/vm_troubleshoot.html#permission-denied-issue-1",
    "title": "Troubleshooting the VM",
    "section": "",
    "text": "Incorrect or Missing Public Key on Server\n\n\nThe public key (id_rsa.pub or id_ed25519.pub) that you provided might not be correctly added to the ~/.ssh/authorized_keys file on the server or it might be missing altogether\n\n\n\nIncorrect Private Key or Key Pair\n\n\nYou may be using the wrong private key (id_rsa or id_ed25519) to connect to the server, or the key pair does not match\n\nssh -i /path/to/your/id_rsa &lt;RemoteUserName&gt;@&lt;hostname&gt;\n\nMake sure the private key file permissions are correctly set\n\nchmod 600 ~/.ssh/id_rsa\n\nWrong Username\n\n\nDouble-check the username (roll number) in your SSH command. Make sure you are using the correct format:\n\nssh &lt;CorrectRemoteUserName&gt;@&lt;hostname&gt;\n\nWrong Domain Name\n\n\nThe domain name you typed might be wrong. Double check the domain name in your SSH command",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Troubleshooting the VM</span>"
    ]
  },
  {
    "objectID": "references/vm_troubleshoot.html#remote-host-identification-changed-issue-2",
    "href": "references/vm_troubleshoot.html#remote-host-identification-changed-issue-2",
    "title": "Troubleshooting the VM",
    "section": "2. Remote Host Identification Changed (Issue 2)",
    "text": "2. Remote Host Identification Changed (Issue 2)\n\nGo to cd ~/.ssh(for Linux or Mac) or cd .ssh (for Windows)\nRemove the known host files with rm known_hosts and remove known_hosts.old if it exists using rm known_hosts.old\nThen execute the following command ssh-keygen -R cs1102.study.iitm.ac.in\nYou can login now using ssh &lt;roll-number&gt;@cs1102.study.iitm.ac.in\n\n\n\n\n\n\n\nNote\n\n\n\nIf all the above steps fails, then it is recommended that students generate a new key using the instructions provided in the course website where they initially entered the key to get ssh access.\n\n\n\n\n\n\n\n\nRead more about troubleshooting the VM by clicking here",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Troubleshooting the VM</span>"
    ]
  },
  {
    "objectID": "references/man.html",
    "href": "references/man.html",
    "title": "History of the man Command",
    "section": "",
    "text": "The man (short for manual) command in Linux is primarily used to view the offline documentation for commands, system calls, library functions, and other parts of the Unix/Linux system. While it is a common misconception that man was initially created specifically for viewing header files, its origins are broader and tied to providing documentation for Unix systems.\n\nOrigins:\n\nThe man command was introduced in Unix Version 3 (1971) as a way to access documentation on Unix commands and features.\nIt was designed to provide structured, formatted manuals for users to learn about tools, utilities, and programming interfaces available on the system.\n\nHeader Files:\n\nWhile man does include sections related to programming and development (such as system calls and library functions), these sections often reference or document concepts found in header files (like stdio.h, unistd.h, etc.).\nThe misconception may arise because programmers frequently use man to read documentation that involves header files.\n\n\n\n\nStructure of man Pages\nThe man pages in Linux are divided into sections, with each section focusing on a specific category of information. These sections help users quickly locate the relevant documentation for commands, programming interfaces, or system tools.\nHere‚Äôs a breakdown of the sections with examples:\n\n\n\n\n\n\n\n\nSection\nContent\nExamples\n\n\n\n\n1\nUser Commands: Commands available to all users, typically found in /bin and /usr/bin.\nls, grep, man (e.g., man ls or man 1 ls to view the manual for ls in section 1).\n\n\n2\nSystem Calls: Functions provided by the kernel. These are low-level operations.\nopen, read, write, fork, kill (e.g., man 2 fork for the fork system call).\n\n\n3\nLibrary Functions: Functions provided by standard C libraries, such as glibc.\nprintf, malloc, strcmp, fopen (e.g., man 3 printf for the printf library function).\n\n\n4\nSpecial Files: Documentation on device files in /dev or special kernel files.\n/dev/null, /dev/random, /proc (e.g., man 4 null for the /dev/null device file).\n\n\n5\nFile Formats: Describes the syntax and structure of configuration files.\n/etc/passwd, /etc/fstab, /etc/hosts (e.g., man 5 passwd for the /etc/passwd file).\n\n\n6\nGames and Screensavers: Fun and miscellaneous programs available on the system.\ntetris, fortune, xlock (e.g., man 6 tetris if a game is installed).\n\n\n7\nMiscellaneous: Topics that don‚Äôt fit into other sections, such as standards and conventions.\nman-pages, locale, regex, signal (e.g., man 7 signal for signal handling in Linux).\n\n\n8\nSystem Administration Tools: Commands for managing the system, typically requiring root.\niptables, systemctl, mount, umount (e.g., man 8 iptables for firewall management).\n\n\n\n\n\n\nAdditional Examples\n\n1 (User Commands): echo, cd, touch, chmod, ssh\n2 (System Calls): execve, mmap, socket, exit\n3 (Library Functions): memcpy, atoi, popen, pthread_create\n4 (Special Files): /dev/sda, /dev/tty, /proc/cpuinfo, /sys\n5 (File Formats): /etc/crontab, /etc/ssh/sshd_config, ~/.bashrc\n6 (Games and Screensavers): nethack, adventure, xscreensaver\n7 (Miscellaneous): ascii, timezone, ld.so, standards\n8 (Admin Tools): fdisk, cron, reboot, sudo, service\n\n\n\n\n\n\n\nTip\n\n\n\nUse the -a flag to view all matching sections for a term. For example:\nman -a kill\nThis will show both the user command (section 1) and the system call (section 2) for kill.",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>History of the `man` Command</span>"
    ]
  },
  {
    "objectID": "references/drawbacks_of_alias.html",
    "href": "references/drawbacks_of_alias.html",
    "title": "A hypothetical Case Study: The GitHub Data Wipe Incident (Alias Misuse in Scripts)",
    "section": "",
    "text": "This case emphasizes the dangers of overriding command names with aliases and why it‚Äôs crucial to use unique names for aliases instead of modifying default behavior unpredictably.\n\n\n\n\nSetting Up The Context\nA developer at a startup was responsible for managing a GitHub repository for their team. To prevent accidental deletions, they aliased git push to git push --dry-run in their shell configuration (.bashrc). This was intended to ensure that they would always verify a push before executing it.\nTo further ‚Äúsimplify‚Äù their workflow, they also created an alias for rm:\nalias rm='rm -i'\nThis forced an interactive confirmation every time they removed a file.\n\n\nThe Incident\nOne day, the developer needed to automate a script that cleaned up unnecessary files before pushing changes. The script looked something like this:\n#!/bin/bash\nrm -rf build/  \ngit add .\ngit commit -m \"Cleanup build artifacts\"\ngit push\nThe script was tested in an interactive shell, where rm was aliased to rm -i, but when executed inside a script, the alias did not apply. As a result:\n\nThe rm -rf build/ command executed without confirmation, deleting critical files.\n\nThe next commands (git add . and git commit) recorded these deletions.\n\nThe final git push command actually pushed the deletions, because the alias git push='git push --dry-run' also did not apply in the script.\n\nThe developer realized their mistake only after team members started reporting missing files in the repository. They had to scramble to recover data using git reflog and backup snapshots.\n\n\nLessons Learned\n\nAliases are not always applied in non-interactive environments\n\n\n\nWhen running scripts, aliases defined in .bashrc or .bash_profile don‚Äôt apply unless explicitly sourced.\n\nInstead of aliasing rm, use a safer command like trash-cli or safe-rm.\n\n\nDo not alias commands with the same name\n\n\nInstead of alias rm='rm -i', use a new name: alias rmi='rm -i'\n\nInstead of alias git push='git push --dry-run', create a new alias: alias git-dry='git push --dry-run'\n\n\nUse explicit scripts instead of aliases for critical operations\n\n\nInstead of aliasing rm, use a wrapper script like:\n\nfunction safe_rm() {\n    read -p \"Are you sure you want to delete: $* ? (y/n) \" choice\n    case \"$choice\" in \n    y|Y ) /bin/rm \"$@\";;\n    * ) echo \"Aborted.\";;\n    esac\n}\nalias rm='safe_rm'\n\nInstead of aliasing git push, use a pre-push hook to enforce a dry-run check.\n\n\n\nOutcome\nThe company implemented strict guidelines:\n\nNo aliases that override built-in commands.\n\nScripts must use absolute paths (/bin/rm, /usr/bin/git) to avoid unintended alias effects.\n\nCritical deletion actions require explicit confirmation in scripts.",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Drawbacks of Alias</span>"
    ]
  }
]