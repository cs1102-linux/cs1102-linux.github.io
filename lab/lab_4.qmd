---
number-depth: 2
---

# Lab-4

**Week-7:** <a href="https://youtu.be/8YmNovNo6NE" target="_blank">Bash Scripts - Part 2A</a>,
<a href="https://youtu.be/n56JIC15DBo" target="_blank">Bash Scripts - Part 2B</a>,
<a href="https://youtu.be/kjMhi4gI0po" target="_blank">Bash Scripts - Part 2C</a><br>

**Week-8:**
<a href="https://youtu.be/kWid87j6qIE" target="_blank">Automating Scripts</a>,
<a href="https://youtu.be/uCJjZ3cbaAw" target="_blank">Stream Editor sed</a>


:::{.callout-note}
Do not repeat examples from the lab session in your report, as they are intended to guide your understanding
:::

:::{.callout-tip appearance="simple"}
All the necessary files for the lab questions can be found in the `/opt/lab_assets` directory in the course VM
:::

## Bash Scripts

**Q1:** Whenever we delete files from a graphical file manager, those files are usually moved to the Recycle Bin by default. But in certain situations, like with some options in the file managers (if you press Ctrl+Shift+Delete after selecting a file) and when you remove the files from the terminal by using the `rm` command, it doesn't go the trash, but is permanently removed from the system. You have to replicate the behavior in the bash terminal, shown by the graphical file managers of moving the files to the trash instead of deleting them permanently. Write a command named `trash-cli`. Whenever we execute the `trash-cli` command, it should move deleted files to the `~/.local/Trash` folder. **(18 marks)**

(Paste the screenshot of your script content, demo usage working with one argument, multiple arguments, and wildcards)

::: {.callout-note icon="false" appearance="simple"}
ðŸ“– **Check this Info**: [Hypothetical case study of alias](/references/drawbacks_of_alias.qmd).
:::

::: {.callout-warning icon="false" appearance="minimal"}
**Hint:** `shift`, `PATH` 
:::

**Q2:** Write a Bash script that converts given phrases from a file `make_me_as_acronyms.txt` into their acronyms by following these rules:  **(16 marks)**

- Extract the first letter of each word.  
- Hyphens (-) act as word separators (like spaces).  
- Remove all other punctuation marks.  
- Convert the acronym to uppercase.  
- Print in the format **"Acronym : Given Phrase"**  

```js
Sample Output
---
ASAP: As Soon As Possible  
LCD: Liquid-crystal display  
TGIF: Thank George It's Friday!  
CPU: Central Processing Unit  
RAM: Random-access memory  
GPU: Graphics-processing unit  
CMOS: Complementary metal-oxide semiconductor  
HTML: Hyper-text Markup Language  
API:  Application programming interface 
```

## Automating Scripts

**Q3:** This question is a continuation of Q1. Automate the task of deleting files that are more than ~~30 days~~ 2 minutes old (for quick demo results) in the folder `~/.local/Trash`.  **(16 marks)**

(Paste the screenshot of your script content and `crontab`, demo usage: delete files using `trash-cli`, execute `ls ~/.local/Trash`, wait for `crontab` to run, and execute `ls ~/.local/Trash` again to show files were deleted automatically and not manually removed.)  


**Q4:**  What tasks would you like to automate on your PC? Mention at least three tasks and write pseudocode steps along with the tools you would use for task completion.  **(18 marks)**

::: {.callout-note appearance="simple" collapse="true"}
### Example Answer

##### **Task-1: Displaying a Philosophical Quote Every Hour**

**Pseudocode Steps:**  
1. I use `curl` to get the data from a URL like [https://zenquotes.io/api/random](https://zenquotes.io/api/random).  
2. I will pipe (`|`) the above command's output to the `jq` command and parse the JSON data.  
3. The quotation will be stored in a variable, and the variable will be passed as an argument to commands like `zenity` or `notify-send`. I will add options to automatically close the popup window after 10 seconds.  
4. The above steps will be placed in a script for `crontab` to execute every hour.  

```bash
0 * * * * /bin/bash /path/to/script
```
:::

## SED Scripts

**Q5:** You are provided with a file named `encrypted.csv` which contains various lines, some of which include encrypted strings using a Caesar cipher. These encrypted entries are identified by the prefixes `ENC:` or `ENC/`, and each of them holds a word that has been ciphered with a fixed alphabetical backward shift of 3.  **(16 marks)** <br>
(Paste the screenshot of your script content and the correct decrypted content)  

**Reference:** <a href="https://www.geeksforgeeks.org/caesar-cipher-in-cryptography/" target="_blank">Caesar Cipher in Cryptography ðŸ§©</a>

::: {.callout-note appearance="simple" collapse="true"}
### Example Output
```js
// Sample Output
ID,Note
1,Welcome to the CS1102 Linux Lab.
2,ENC:Wkh
Decrypted: The
3,ENC:FV1902
Decrypted: CS1902
4,ENC/Ode
Decrypted: Lab
5,ENC/frxuvh
Decrypted: course
6,This lab is conducted every week.
7,ENC/lv
Decrypted: is
8,ENC/juhdw
Decrypted: great
9,Hint: Count the vowels in line 1.
10,Always logout from the lab system.
```
:::


**Q6:** Write a `sed` script that processes a given CSV file `/opt/cs1102/lab_assets/lab_4_assets/students.csv`. **(16 marks)**

- Removes blank lines.  
- Converts text to uppercase.  
- Replaces commas with tabs for better readability.  
- Removes leading and trailing spaces in each field.  
- Removes all student records where CGPA is less than 8.0.  
- Masks student IDs (e.g., `101` â†’ `1XX`).  
- Adds a `Processed` tag at the end of each line.  

(Paste the screenshot of script content, demo usage: Running the script on `students.csv` and displaying modified content)  

```js
Sample output
---
ID      Name            Department          CGPA    Processed  
1XX     ALICE JOHNSON   COMPUTER SCIENCE    9.1     Processed  
1XX     BOB SMITH       ELECTRONICS         8.7     Processed  
1XX     CHARLIE BROWN   MECHANICAL          8.3     Processed  
1XX     EVA GREEN       MATHEMATICS         9.5     Processed  
1XX     ANA HUTCHIN     METALLURGY          8.8     Processed  
```
