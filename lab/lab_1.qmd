---
number-depth: 2
---

# Lab-1

**Week-1:** <a href="https://youtu.be/PHrN7yp1AJw" target="_blank">Launching a Linux Virtual Machine</a>, 
<a href="https://youtu.be/qrAnlpcMyYc" target="_blank">Command line environment</a>, 
<a href="https://youtu.be/DIpBEmRDHnw" target="_blank">Simple Commands in Linux - 1</a>, 
<a href="https://youtu.be/lpe6AKk5GIk" target="_blank">Simple Commands in Linux - 2</a>


**Week-2:** <a href="https://youtu.be/NIIZ1cgrO7g" target="_blank">Command line editors - Part 01</a>, 
<a href="https://youtu.be/HLhza4vZTsI" target="_blank">Command line editors - Part 02</a>, 
<a href="https://youtu.be/w25zlMXshHw" target="_blank">Command line editors - Part 03</a>, 
<a href="https://youtu.be/SxDIXtxR33c" target="_blank">Networking Commands and SSH</a>


:::{.callout-note}
Do not repeat examples in your report that are already shown in the lab session; these examples are intended to guide your understanding.
:::

## Navigating the Linux & Exploring the FHS   

![](/images/linux-filesystem-hierarchy.png)

**Q1:**

- A typical C program that deals with networking will include the header file `socket.h` for using socket-related functions, and for low-level inter-process communication, `unistd.h` (which provides access to `pipe()`) is used.

- If you're curious to know whatâ€™s **really defined inside `socket.h` or `unistd.h`**, where would you navigate in your Linux system to find these headers? Extra info: Go to `x86_64-linux-gnu/sys` sub-directory to find files related to system. *(Take a screenshot of the command(s) you used to navigate to the location.)*

- Once you find the file, **display the first 30 lines of `socket.h` or `unistd.h`** on your terminal using an appropriate command. *(Take a screenshot of this terminal output.)*

- What interesting macros, types, or function declarations did you find in the first 30 lines? *(Text Answer - Max 5 lines)* **(15 marks)**

**Q2:**

- After exploring `socket.h`, you come across several unfamiliar but interesting functions such as `socket()`, `bind()`, `listen()`, and `accept()`. You understand their purpose is related to networking, but you're unsure of their exact usage, arguments, or return values.

- **How can you view the documentation or usage details for these system-level functions in Linux?** *(Take a screenshot of the command(s) you used.)*  **(10 marks)**

::: {.callout}
ðŸ“– **Check this Info**: [History of the `man` Command](/references/man.qmd).  
:::

**Q3:**

- What is **Setuid** and **Setgid** in Linux file permissions? *(Text Answer - Max 5 lines)*

- In Linux systems, find an example of a **Setuid** or **Setgid** file (commonly found in `/usr/bin` or `/bin`) and take a **screenshot** of its permissions using `ls -l`.

- Once found, **execute the file** or explore its functionality â€” what interesting behavior do you observe? *(Take screenshots and paste those)*

- What are the **advantages and disadvantages** of using **Setuid/Setgid** on executables? *(Text Answer)*  **(10 marks)**


**Q4:**

**Special Files: `/proc` â€” Virtual Filesystem for Kernel and Process Information**

*(Minimal File Content Screenshot and Text Answer - Max 5 lines)* **(40 marks)**

- **4.1:** Where is the `/proc` directory located, and what kind of filesystem is it?

- **4.2:** What does the `/proc/cpuinfo` file contain? *(Processor information)*

- **4.3:** What information can be found in `/proc/meminfo`? *(Memory-related details)*

- **4.4:** What is the purpose of `/proc/uptime` and `/proc/loadavg`? *(System uptime and load averages)*

- **4.5:** What do `/proc/[pid]/status` and `/proc/[pid]/cmdline` reveal? *(Process-specific info)*

- **4.6:** What is `/proc/kallsyms` used for? *(Kernel symbol table)*

- **4.7:** How can you monitor open files and file descriptors using `/proc/[pid]/fd/`? *(Demo with a running process)*

- **4.8:** What does `/proc/sys/` directory contain? How can you use it to modify kernel parameters temporarily?

- **4.9:** What is `/proc/bus/` and what is its historical significance? *(PCI and USB bus-related files)*

- **4.10:** What is the purpose of `/proc/buddyinfo`, and how is it related to memory fragmentation?


## Text Editors  

1. **Customize Your Vim Editor:** Enhance the usability and readability of your Vim editor by customizing it. Explore popular `.vimrc` configurations on GitHub or other websites. Share your favorite custom configuration and explain why you chose it (Screenshot and Text Answer). **(Bonus Task)**

2. **Learn the Basics of Vim:** If youâ€™re new to Vim, donâ€™t worry! Weâ€™ll cover specific Vim-related tasks in **Lab-2**. For now, focus on learning the basics of the Vim editor using the following reference:  [**Learn Vim Basics**](https://learnvim.irian.to/basics/starting_vim) **(Not Graded)**


## Networking

**Q5:** (Perform this task in your local machine and refer to the [instructions](/lab_instructions.qmd))

- Do you know before `ssh`, there is something called `telnet`. What is Telnet?  And why we have moved from `telnet` to `ssh` ? (Text Answer - Max 5 lines)  
And `telnet` into a free open servers [List of Open Telnet Servers](https://store.chipkin.com/articles/telnet-list-of-telnet-servers) . (Provide screenshots and a short explanation-Text Answer) **(10 marks)**

**Q6:** (Perform this task in your local machine and refer to the [instructions](/lab_instructions.qmd))

#### **Know your Network** (Screenshots and Text Answer) **(10 marks)**

**Know the Difference: FTP vs. SFTP**  

- Before the secure `sftp`, the `ftp` protocol was widely used.
- What is FTP? Why is SFTP preferred over FTP today? (Text Answer - Max 5 lines)  
- Try connecting to an open FTP server using the `ftp` command.
- Example: `ftp speedtest.tele2.net` (Provide screenshots of listing files or downloading a sample file.)  
- If possible, try `sftp` as a secure alternative and compare the outputs. (Provide a short explanation - Text Answer)  


## Writing Your First Bash Script

**Q7:**

- Write a Bash script to automate the creation of the following directory structure, including files, hard links, and symbolic links. After executing your script, run the `tree` command to verify the output. (Provide screenshots of the script content and output directory structure by tree command) **(20 marks)**

::: {.callout-note}
A Bash script is simply a file containing a sequence of commands that are executed in order. Think of it as a way to automate tasks that you would normally run manually in the terminal.
:::

```bash
   project/
   â”œâ”€â”€ docs/
   â”‚   â”œâ”€â”€ readme.txt
   â”‚   â””â”€â”€ changelog.txt
   â”œâ”€â”€ src/
   â”‚   â”œâ”€â”€ main.c
   â”‚   â”œâ”€â”€ utils.c
   â”‚   â””â”€â”€ include/
   â”‚       â””â”€â”€ utils.h
   â”œâ”€â”€ logs/
   â”‚   â”œâ”€â”€ main_log.c (hard link to src/main.c)
   â”‚   â”œâ”€â”€ utils_log.c (hard link to src/utils.c)
   â”‚   â””â”€â”€ old_logs/
   â”‚       â””â”€â”€ archive.log
   â””â”€â”€ symlinks/
      â”œâ”€â”€ readme_link.txt (symbolic link to docs/readme.txt)
      â”œâ”€â”€ main_symlink.c (symbolic link to src/main.c)
      â””â”€â”€ multi_level/
         â””â”€â”€ readme_multi_link.txt (symbolic link to symlinks/readme_link.txt)
```


### Get to know the `synchro show`, `synchro init`, `synchro eval` and `synchro status` 

**Q8:**

Follow the [**instructions**](/references/vm_nav.qmd) to solve the questions in the VM 

- Solve the following practice questions **(Bonus - 5 marks)**

   - `practice_2.1`
   - `practice_2.2`
   - `practice_2.3`

After solving these questions, type `synchro status` and take the screenshot
