---
number-depth: 2
---

# Lab-2

**Week-3:** <a href="https://youtu.be/Lcx9UsS7y8Y" target="_blank">Combining commands and files</a>, 
<a href="https://youtu.be/BBh69kH_G_Y" target="_blank">Redirections</a>, 
<a href="https://youtu.be/OAEVYgH1IMM" target="_blank">Software Management - Part 01</a>, 
<a href="https://youtu.be/3saraSGT1i0" target="_blank">Software Management - Part 02</a>, 
<a href="https://youtu.be/2aThmDRvSWU" target="_blank">Linux process management</a><br>

**Week-4:** <a href="https://youtu.be/1y85iTaqq8Y" target="_blank">Pattern Matching - Part 01</a>, 
<a href="https://youtu.be/XQUJPRc-7zA" target="_blank">Pattern Matching - Part 02</a>

:::{.callout-note}
Do not repeat examples from the lab session in your report, as they are intended to guide your understanding
:::

:::{.callout-tip appearance="simple"}
All the necessary files for the lab questions can be found in the `/opt/lab_assets` directory in the course VM
:::


## Combining Commands and Redirections

**Q1:** Please create at least one question focused on the topics of combining commands, redirections, and files. We prioritize quality over quantity. Think outside the box. The teaching assistant will award marks based on how uniquely you can design the question(s). **(10 marks)**

## Software Management

**Q2:** Use the command `apt-cache show <pkg_name>` on at least **five** command-line utilities that were **not covered in the lectures**. Describe the useful information you obtain from this command for each package. **(20 marks)**
  
- This question can be attempted either on the CS1102 VM or on your personal PC, follow the instructions. (Screenshot and Text Answer) 

::: {.callout-warning icon="false" appearance="minimal"}
**Hint:** You can use `dpkg -l` to list installed packages.
:::


**Q3:** Please visit [gnu.org](https://www.gnu.org/gnu/gnu.html) and write a **10-line comment** summarizing your understanding of the GNU Project. (Text answer) **(10 marks)**

## System Services and Processes Management in Linux

**Q4:** Systemctl is a command-line tool that allows for the management and monitoring of the systemd system and service manager. It consists of a range of system management utilities, libraries, and daemons that have replaced the previous System V (SysV) init daemon. Experiment what all we can do with `systemctl` command. (Screenshot and Text Answers)   **(25 marks)**

:::{.callout-note title="Note" icon="false"}
This question can be attempted either on the CS1102 VM (You won't be provided sudo access) or on your personal PC (Your are a sudo user for your PC). For each option, explain what it does and give a demo. Before each activity, type your roll no and date, then onwards start the process and take screenshots of achiving tasks and paste those. 
:::

:::{.callout-note icon="false"}
**References:** [linuxsimply](https://linuxsimply.com/systemctl-command-in-linux/), [linuxhandbook](https://linuxhandbook.com/systemctl-commands/), [liquidweb](https://www.liquidweb.com/blog/what-is-systemctl-an-in-depth-overview/)  
:::

## Pattern Matching

**Q5:** Search through all the installed packages on the current system using the `dpkg -l` command. Get lines if there is a word **tool** (case insensitive) in description column only and which package caught your attention. (Screenshot and/or text answer) **(10 marks)**

**Q6:** 

Perform the following extractions and pattern matches on the firewall log file (file path: `/opt/lab_assets/lab_2_assets/network.log`) to analyze network activity using `grep` or `vi` editor **(25 marks)**


:::{.callout-caution icon="false" title="Show Metadata" appearance="simple" collapse="true"}

<br>

**Sample Log Line**  

```js
Jul 02 17:29:10 firewall IN=eth0 OUT=eth1 MAC=8c:44:c4:3f:69:d1 SRC=21.126.215.217 DST=172.20.165.140 PROTO=TCP SPT=59539 DPT=59564 LEN=1332 WINDOW=14600 URG URGP=0
```

| **Field**               | **Explanation**                                                                        |
| ----------------------- | -------------------------------------------------------------------------------------- |
| `Jul 02 17:29:10`       | **Timestamp** – Log time (`Month Day HH:MM:SS`).                 |
| `firewall`              | **Host** that generated the log.      |
| `IN=eth0`               | **Incoming network interface** – where the packet entered (e.g., `eth0`, `wlan0`).     |
| `OUT=eth1`              | **Outgoing network interface** – where the packet is going out. |
| `MAC=8c:44:c4:3f:69:d1` | **MAC address** of the device sending/receiving the packet.                            |
| `SRC=21.126.215.217`    | **Source IP address** – where the packet came from.                                    |
| `DST=172.20.165.140`    | **Destination IP address** – where the packet is headed.                               |
| `PROTO=TCP`             | **Protocol used**.                          |
| `SPT=59539`             | **Source Port** (only for TCP/UDP) – e.g., port used by sender.                        |
| `DPT=59564`             | **Destination Port** (only for TCP/UDP) – port at the destination (e.g., 80, 443, 22). |
| `LEN=1332`              | **Packet Length** in bytes – total size of the packet.                                 |
| `WINDOW=14600`          | **TCP Window Size** – amount of data that can be sent before acknowledgment.           |
| `URG`                   | **TCP Flag**.             |
| `URGP=0`                | **Urgent Pointer** – TCP-specific field used with `URG` flag.                          |

<br>

:::

**Q6.1:** Extract all log lines where the protocol (`PROTO`) is TCP and the TCP flags include `SYN` (either alone or combined like `SYN ACK`).

**Q6.2:** Find all lines where the source IP (`SRC`) is in the `192.168.*.*` private network range.  

**Q6.3:** Match all log entries with a destination port (`DPT`) number between 1 and 1024 (inclusive).  

**Q6.4:** Find all UDP packets (`PROTO=UDP`) where the source port (`SPT`) is either 53 or 123 (common DNS and NTP ports).  

**Q6.5:** Extract all lines where the MAC address starts with `00:0c:29`.  

**Q6.6:** Match all ICMP packets (`PROTO=ICMP`) with type `8` (Echo Request).  

**Q6.7:** Find log entries where the packet length (`LEN`) is greater than or equal to 100 bytes.  

**Q6.8:** Extract lines where the interface IN is `eth0` and the OUT interface is empty (i.e., `OUT=` with no interface name).  

**Q6.9:** Find all packets with a TCP window size (`WINDOW`) of exactly 14600.  

**Q6.10:** Extract all log lines where the destination IP (`DST`) ends with `.1`.