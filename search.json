[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS1102 Linux Shell Lab",
    "section": "",
    "text": "Getting Started",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "index.html#important-links",
    "href": "index.html#important-links",
    "title": "CS1102 Linux Shell Lab",
    "section": "Important Links",
    "text": "Important Links\nCourse Link: Check the course portal  Course Calendar: Calendar for this course  Lab Meeting Link: https://meet.google.com/jbe-xuew-hia \nTutorial Videos to get started: \n\nVM Login process explained in step by step \nTo use course VM and solve assignments",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "index.html#vm-access",
    "href": "index.html#vm-access",
    "title": "CS1102 Linux Shell Lab",
    "section": "VM-Access",
    "text": "VM-Access\n\nOpen your terminal/command prompt/powershell from your system (NOT from the VirtualBox)\nFor simpler setup do not enter any passphrase and skip all the prompts by pressing Enter\nType ssh-keygen in the terminal/command prompt/powershell and Enter. You should see output similar to the following:\n\n&lt;username&gt;@my-laptop:~$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/&lt;username&gt;/.ssh/id_rsa):\nCreated directory '/home/&lt;username&gt;/.ssh'.\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/&lt;username&gt;/.ssh/id_rsa\nYour public key has been saved in /home/&lt;username&gt;/.ssh/id_rsa.pub\nThe key fingerprint is:\nSHA256:MyMwAvTo90BeuaGhaS9aq3Lc2QivijK7oMkigMCm14Y &lt;username&gt;@my-laptop\nThe key's randomart image is:\n+---[RSA 3072]----+\n|o.               |\n| .o   .          |\n|...+o+           |\n|oo=.+oo          |\n|== B .. S        |\n|= E =  . +       |\n|o+.* =           |\n|%o+.= .          |\n|#Oo.             |\n+----[SHA256]-----+\n\nBy default, if the file is not specified\n\n\nPublic key will be stored as ~/.ssh/id_ed25519.pub or C:\\Users\\&lt;username&gt;\\.ssh\\id_rsa.pub.\nPrivate key will be stored as ~/.ssh/id_ed25519 or C:\\Users\\&lt;username&gt;\\.ssh\\id_rsa\n\n\nTo view the public key, use cat command to display the content of the public key which ends with .pub inside the ~/.ssh directory (by default) (For Windows follow the above directory structure)\n\ncat ~/.ssh/id_rsa.pub (or)\ncat ~/.ssh/id_ed25519.pub \n\nCopy and paste the content of the public key (NOT THE PRIVATE KEY) that ends with .pub into the “SSH Key” form field on the website (use your student email ID to log in).\nAfter submitting the SSH key, you can log in to the VM using SSH from your system.\n\n\nEnsure the directory ~/.ssh with file permission 700\nEnsure the files ~/.ssh/id_rsa.pub and ~/.ssh/id_rsa with file permission 600.\n\n\nThe following command used to connect remote machine via SSH using the default private key (~/.ssh/id_rsa or ~/.ssh/id_ed25519)\n\nssh &lt;roll-number&gt;@cs1102.study.iitm.ac.in\n\nThe below command used to connect remote machine via SSH using the custom private key path\n\nssh -i &lt;path/to/private/key&gt; &lt;roll-number&gt;@cs1102.study.iitm.ac.in\n\nOnce, you have logged in your command prompt will look like:\n\n\n&lt;roll-number&gt;@cs1102:~$\n\n\n\n\n\n\n\nNote\n\n\n\nRead more about SSH by clicking here",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "lab/lab_1.html",
    "href": "lab/lab_1.html",
    "title": "Lab-1",
    "section": "",
    "text": "Week-1: Launching a Linux Virtual Machine, Command line environment, Simple Commands in Linux - 1, Simple Commands in Linux - 2\nWeek-2: Command line editors - Part 01, Command line editors - Part 02, Command line editors - Part 03, Networking Commands and SSH",
    "crumbs": [
      "**Labs**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Lab-1</span>"
    ]
  },
  {
    "objectID": "references/ga_doc.html",
    "href": "references/ga_doc.html",
    "title": "Grading Document (May 2025)",
    "section": "",
    "text": "Introduction to the Linux Shell Lab\nCorequisites: Introduction to the Linux Shell      Credits: 1\nThe Introduction to the Linux Shell Lab consists of two components:",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grading Document (May 2025)</span>"
    ]
  },
  {
    "objectID": "references/ga_doc.html#introduction-to-the-linux-shell-lab",
    "href": "references/ga_doc.html#introduction-to-the-linux-shell-lab",
    "title": "Grading Document (May 2025)",
    "section": "",
    "text": "Online Lab\n\nIn-Campus Lab",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grading Document (May 2025)</span>"
    ]
  },
  {
    "objectID": "references/ga_doc.html#online-lab-ol",
    "href": "references/ga_doc.html#online-lab-ol",
    "title": "Grading Document (May 2025)",
    "section": "Online Lab (OL)",
    "text": "Online Lab (OL)\nOnline Lab assignments:\nThis lab will be conducted online during the course. The start dates for the labs are as follows:\n\nLab 1: Released on 21 June 2025     Deadline - 25 June 2025\nLab 2: Released on 05 July 2025     Deadline - 09 July 2025\nLab 3: Released on 22 July 2025       Deadline - 26 July 2025\nLab 4 and 5: Released on 05 August 2025     Deadline - 12 August 2025\n\nLabs are typically expected to be completed within 4 days. Teaching Assistants (TAs) will be available to assist you during this period.",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grading Document (May 2025)</span>"
    ]
  },
  {
    "objectID": "references/ga_doc.html#in-campus-lab-il",
    "href": "references/ga_doc.html#in-campus-lab-il",
    "title": "Grading Document (May 2025)",
    "section": "In-campus Lab (IL)",
    "text": "In-campus Lab (IL)\nIn-campus Lab work: Students are required to visit IIT Madras for lab work.\nLab Dates:\n\nSlot 1: September 1st week\nSlot 2: September 2nd week\n\nEligibility to attend the in-person lab:\n\nAverage of all online lab scores &gt;= 40/100.\n\nEligibility to obtain the final lab course grade:\n\nAverage of all lab scores &gt;= 40/100.\nAttend the in-person lab at IIT Madras",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grading Document (May 2025)</span>"
    ]
  },
  {
    "objectID": "references/ga_doc.html#final-grading-of-lab",
    "href": "references/ga_doc.html#final-grading-of-lab",
    "title": "Grading Document (May 2025)",
    "section": "Final Grading of Lab",
    "text": "Final Grading of Lab\n\nOnline Lab(OL): Average of all 5 lab scores\nIn-campus Lab(IL): 1 * Lab task and demonstration\n\nFinal course score (T) = \\(0.5*(OL)+0.5*(IL)\\)",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grading Document (May 2025)</span>"
    ]
  },
  {
    "objectID": "references/vm_nav.html",
    "href": "references/vm_nav.html",
    "title": "How to solve the questions in the VM?",
    "section": "",
    "text": "Log in to the VM using ssh &lt;roll-number&gt;@cs1102.study.iitm.ac.in\nTo view all the available questions in the directory\n\nls /opt/cs1102\n\n\nCreate a directory in your home folder using mkdir cs1102 and navigate to the directory cd cs1102\n\n\n\nYour command prompt should now look like this:\n\n\n&lt;roll-number&gt;@cs1102:~/cs1102$\n\n\nSolve each question by creating a directory named after the question(example practice_2.1)\n\nmkdir practice_2.1\ncd practice_2.1\n\nAfter navigating to the practice_2.1 directory, type synchro show to view the question\n\n\n\nSolve the question by either writing the script &lt;script&gt;.sh or by executing commands directly in the command line, as instructed in the question\nEnsure that you have the necessary permissions to run the script. If not, change the script’s permissions using chmod 755 &lt;script&gt;.sh\nRun synchro eval to submit the question. It will display the submission status and show how many test cases you have passed or failed\nTo view the public test cases and evaluation script for the question, navigate to ~/opt/cs1102/&lt;question&gt;\n\n\n\n\n\n\n\nImportant\n\n\n\n\nsynchro init - to iniatilize or bring all the neccessary files to solve the problem\nsynchro show - to view the question\nsynchro eval - to submit and evaluate the question\n\nAll these commands needs to be executed within the directory (~/cs1102/&lt;question&gt;)\n\nsynchro status - to view the number of questions you have solved\n\nAll the instructions are also available in the course VM itself. You can read them by batcat ~/README.md",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>How to solve the questions in the VM?</span>"
    ]
  },
  {
    "objectID": "references/vm_troubleshoot.html",
    "href": "references/vm_troubleshoot.html",
    "title": "Troubleshooting the VM",
    "section": "",
    "text": "1. Permission Denied (Issue 1)\nThe error message Permission denied (publickey) indicates that the SSH server is not accepting your public key for authentication. Below are some common reasons for this error and the steps you can take to resolve it:\nSolution: Reupload your ssh-key in the site",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Troubleshooting the VM</span>"
    ]
  },
  {
    "objectID": "references/vm_troubleshoot.html#permission-denied-issue-1",
    "href": "references/vm_troubleshoot.html#permission-denied-issue-1",
    "title": "Troubleshooting the VM",
    "section": "",
    "text": "Incorrect or Missing Public Key on Server\n\n\nThe public key (id_rsa.pub or id_ed25519.pub) that you provided might not be correctly added to the ~/.ssh/authorized_keys file on the server or it might be missing altogether\n\n\n\nIncorrect Private Key or Key Pair\n\n\nYou may be using the wrong private key (id_rsa or id_ed25519) to connect to the server, or the key pair does not match\n\nssh -i /path/to/your/id_rsa &lt;RemoteUserName&gt;@&lt;hostname&gt;\n\nMake sure the private key file permissions are correctly set\n\nchmod 600 ~/.ssh/id_rsa\n\nWrong Username\n\n\nDouble-check the username (roll number) in your SSH command. Make sure you are using the correct format:\n\nssh &lt;CorrectRemoteUserName&gt;@&lt;hostname&gt;\n\nWrong Domain Name\n\n\nThe domain name you typed might be wrong. Double check the domain name in your SSH command",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Troubleshooting the VM</span>"
    ]
  },
  {
    "objectID": "references/vm_troubleshoot.html#remote-host-identification-changed-issue-2",
    "href": "references/vm_troubleshoot.html#remote-host-identification-changed-issue-2",
    "title": "Troubleshooting the VM",
    "section": "2. Remote Host Identification Changed (Issue 2)",
    "text": "2. Remote Host Identification Changed (Issue 2)\n\nGo to cd ~/.ssh(for Linux or Mac) or cd .ssh (for Windows)\nRemove the known host files with rm known_hosts and remove known_hosts.old if it exists using rm known_hosts.old\nThen execute the following command ssh-keygen -R cs1102.study.iitm.ac.in\nYou can login now using ssh &lt;roll-number&gt;@cs1102.study.iitm.ac.in\n\n\n\n\n\n\n\nNote\n\n\n\nIf all the above steps fails, then it is recommended that students generate a new key using the instructions provided in the course website where they initially entered the key to get ssh access.\n\n\n\n\n\n\n\n\nRead more about troubleshooting the VM by clicking here",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Troubleshooting the VM</span>"
    ]
  },
  {
    "objectID": "references/man.html",
    "href": "references/man.html",
    "title": "History of the man Command",
    "section": "",
    "text": "The man (short for manual) command in Linux is primarily used to view the offline documentation for commands, system calls, library functions, and other parts of the Unix/Linux system. While it is a common misconception that man was initially created specifically for viewing header files, its origins are broader and tied to providing documentation for Unix systems.\n\nOrigins:\n\nThe man command was introduced in Unix Version 3 (1971) as a way to access documentation on Unix commands and features.\nIt was designed to provide structured, formatted manuals for users to learn about tools, utilities, and programming interfaces available on the system.\n\nHeader Files:\n\nWhile man does include sections related to programming and development (such as system calls and library functions), these sections often reference or document concepts found in header files (like stdio.h, unistd.h, etc.).\nThe misconception may arise because programmers frequently use man to read documentation that involves header files.\n\n\n\n\nStructure of man Pages\nThe man pages in Linux are divided into sections, with each section focusing on a specific category of information. These sections help users quickly locate the relevant documentation for commands, programming interfaces, or system tools.\nHere’s a breakdown of the sections with examples:\n\n\n\n\n\n\n\n\nSection\nContent\nExamples\n\n\n\n\n1\nUser Commands: Commands available to all users, typically found in /bin and /usr/bin.\nls, grep, man (e.g., man ls or man 1 ls to view the manual for ls in section 1).\n\n\n2\nSystem Calls: Functions provided by the kernel. These are low-level operations.\nopen, read, write, fork, kill (e.g., man 2 fork for the fork system call).\n\n\n3\nLibrary Functions: Functions provided by standard C libraries, such as glibc.\nprintf, malloc, strcmp, fopen (e.g., man 3 printf for the printf library function).\n\n\n4\nSpecial Files: Documentation on device files in /dev or special kernel files.\n/dev/null, /dev/random, /proc (e.g., man 4 null for the /dev/null device file).\n\n\n5\nFile Formats: Describes the syntax and structure of configuration files.\n/etc/passwd, /etc/fstab, /etc/hosts (e.g., man 5 passwd for the /etc/passwd file).\n\n\n6\nGames and Screensavers: Fun and miscellaneous programs available on the system.\ntetris, fortune, xlock (e.g., man 6 tetris if a game is installed).\n\n\n7\nMiscellaneous: Topics that don’t fit into other sections, such as standards and conventions.\nman-pages, locale, regex, signal (e.g., man 7 signal for signal handling in Linux).\n\n\n8\nSystem Administration Tools: Commands for managing the system, typically requiring root.\niptables, systemctl, mount, umount (e.g., man 8 iptables for firewall management).\n\n\n\n\n\n\nAdditional Examples\n\n1 (User Commands): echo, cd, touch, chmod, ssh\n2 (System Calls): execve, mmap, socket, exit\n3 (Library Functions): memcpy, atoi, popen, pthread_create\n4 (Special Files): /dev/sda, /dev/tty, /proc/cpuinfo, /sys\n5 (File Formats): /etc/crontab, /etc/ssh/sshd_config, ~/.bashrc\n6 (Games and Screensavers): nethack, adventure, xscreensaver\n7 (Miscellaneous): ascii, timezone, ld.so, standards\n8 (Admin Tools): fdisk, cron, reboot, sudo, service\n\n\n\n\n\n\n\nTip\n\n\n\nUse the -a flag to view all matching sections for a term. For example:\nman -a kill\nThis will show both the user command (section 1) and the system call (section 2) for kill.",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>History of the `man` Command</span>"
    ]
  },
  {
    "objectID": "references/drawbacks_of_alias.html",
    "href": "references/drawbacks_of_alias.html",
    "title": "A hypothetical Case Study: The GitHub Data Wipe Incident (Alias Misuse in Scripts)",
    "section": "",
    "text": "This case emphasizes the dangers of overriding command names with aliases and why it’s crucial to use unique names for aliases instead of modifying default behavior unpredictably.\n\n\n\n\nSetting Up The Context\nA developer at a startup was responsible for managing a GitHub repository for their team. To prevent accidental deletions, they aliased git push to git push --dry-run in their shell configuration (.bashrc). This was intended to ensure that they would always verify a push before executing it.\nTo further “simplify” their workflow, they also created an alias for rm:\nalias rm='rm -i'\nThis forced an interactive confirmation every time they removed a file.\n\n\nThe Incident\nOne day, the developer needed to automate a script that cleaned up unnecessary files before pushing changes. The script looked something like this:\n#!/bin/bash\nrm -rf build/  \ngit add .\ngit commit -m \"Cleanup build artifacts\"\ngit push\nThe script was tested in an interactive shell, where rm was aliased to rm -i, but when executed inside a script, the alias did not apply. As a result:\n\nThe rm -rf build/ command executed without confirmation, deleting critical files.\n\nThe next commands (git add . and git commit) recorded these deletions.\n\nThe final git push command actually pushed the deletions, because the alias git push='git push --dry-run' also did not apply in the script.\n\nThe developer realized their mistake only after team members started reporting missing files in the repository. They had to scramble to recover data using git reflog and backup snapshots.\n\n\nLessons Learned\n\nAliases are not always applied in non-interactive environments\n\n\n\nWhen running scripts, aliases defined in .bashrc or .bash_profile don’t apply unless explicitly sourced.\n\nInstead of aliasing rm, use a safer command like trash-cli or safe-rm.\n\n\nDo not alias commands with the same name\n\n\nInstead of alias rm='rm -i', use a new name: alias rmi='rm -i'\n\nInstead of alias git push='git push --dry-run', create a new alias: alias git-dry='git push --dry-run'\n\n\nUse explicit scripts instead of aliases for critical operations\n\n\nInstead of aliasing rm, use a wrapper script like:\n\nfunction safe_rm() {\n    read -p \"Are you sure you want to delete: $* ? (y/n) \" choice\n    case \"$choice\" in \n    y|Y ) /bin/rm \"$@\";;\n    * ) echo \"Aborted.\";;\n    esac\n}\nalias rm='safe_rm'\n\nInstead of aliasing git push, use a pre-push hook to enforce a dry-run check.\n\n\n\nOutcome\nThe company implemented strict guidelines:\n\nNo aliases that override built-in commands.\n\nScripts must use absolute paths (/bin/rm, /usr/bin/git) to avoid unintended alias effects.\n\nCritical deletion actions require explicit confirmation in scripts.",
    "crumbs": [
      "**References**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Drawbacks of Alias</span>"
    ]
  }
]